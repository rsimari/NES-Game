;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_Frame_Number
	.importzp	_InputPort1
	.import		_WaitFrame
	.import		_UnRLE
	.export		_i
	.export		_player_tl
	.export		_player_tr
	.export		_player_bl
	.export		_player_br
	.export		_level1
	.export		_c_map1
	.export		_PALETTE
	.export		_time_min
	.export		_time_sec_low
	.export		_time_sec_high
	.export		_X
	.export		_Y
	.export		_player_state
	.export		_player_left_side
	.export		_player_right_side
	.export		_player_bottom
	.export		_player_top
	.export		_player_center_x
	.export		_player_center_y
	.export		_collision_row
	.export		_collision_col
	.export		_reset_scroll
	.export		_set_palette
	.export		_init_player
	.export		_screen_on
	.export		_screen_off
	.export		_update_time
	.export		_input_handler
	.export		_update_sprite
	.export		_add_second
	.export		_draw_background
	.export		_get_player_border
	.export		_collision_check_vert
	.export		_collision_check_horiz
	.export		_main

.segment	"DATA"

_time_min:
	.byte	$00
_time_sec_low:
	.byte	$00
_time_sec_high:
	.byte	$00

.segment	"RODATA"

_level1:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$A0
	.byte	$A2
	.byte	$01
	.byte	$02
	.byte	$A1
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$A3
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$A5
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$A3
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$A5
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$A3
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$A5
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$A3
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$A5
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$A6
	.byte	$A4
	.byte	$00
	.byte	$10
	.byte	$A5
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$A3
	.byte	$10
	.byte	$A5
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$A3
	.byte	$00
	.byte	$A5
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$A3
	.byte	$00
	.byte	$A5
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$A3
	.byte	$00
	.byte	$A5
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$A6
	.byte	$A4
	.byte	$A7
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$00
_c_map1:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_PALETTE:
	.byte	$20
	.byte	$0C
	.byte	$27
	.byte	$37
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$0C
	.byte	$27
	.byte	$37
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"OAM"
.segment	"BSS"
.segment	"ZEROPAGE"
_i:
	.res	2,$00
.segment	"OAM"
_player_tl:
	.res	4,$00
.segment	"OAM"
_player_tr:
	.res	4,$00
.segment	"OAM"
_player_bl:
	.res	4,$00
.segment	"OAM"
_player_br:
	.res	4,$00
.segment	"BSS"
_X:
	.res	1,$00
.segment	"BSS"
_Y:
	.res	1,$00
.segment	"BSS"
_player_state:
	.res	1,$00
.segment	"BSS"
_player_left_side:
	.res	1,$00
.segment	"BSS"
_player_right_side:
	.res	1,$00
.segment	"BSS"
_player_bottom:
	.res	1,$00
.segment	"BSS"
_player_top:
	.res	1,$00
.segment	"BSS"
_player_center_x:
	.res	1,$00
.segment	"BSS"
_player_center_y:
	.res	1,$00
.segment	"BSS"
_collision_row:
	.res	1,$00
.segment	"BSS"
_collision_col:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ reset_scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_scroll: near

.segment	"CODE"

;
; PPU_SCROLL = 0x00;
;
	lda     #$00
	sta     $2005
;
; PPU_SCROLL = 0x00;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ set_palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_palette: near

.segment	"CODE"

;
; PPU_ADDRESS = BG_PALETTE_HIGH;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = BG_PALETTE_LOW;
;
	lda     #$00
	sta     $2006
;
; for (i = 0; i < sizeof(PALETTE); ++i) // always use ++i, instead of i++
;
	sta     _i
	sta     _i+1
L046F:	lda     _i+1
	cmp     #$00
	bne     L0477
	lda     _i
	cmp     #$20
L0477:	bcs     L0470
;
; PPU_DATA = PALETTE[i];
;
	lda     #<(_PALETTE)
	sta     ptr1
	lda     #>(_PALETTE)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for (i = 0; i < sizeof(PALETTE); ++i) // always use ++i, instead of i++
;
	inc     _i
	bne     L046F
	inc     _i+1
	jmp     L046F
;
; reset_scroll();
;
L0470:	jmp     _reset_scroll

.endproc

; ---------------------------------------------------------------
; void __near__ init_player (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_player: near

.segment	"CODE"

;
; X = 50;
;
	lda     #$32
	sta     _X
;
; Y = 64;
;
	lda     #$40
	sta     _Y
;
; player_tl.x = MIN_X + X;
;
	lda     _X
	sta     _player_tl+3
;
; player_tl.y = MIN_Y + Y;
;
	lda     _Y
	sta     _player_tl
;
; player_tl.attributes = 0x00;
;
	lda     #$00
	sta     _player_tl+2
;
; player_tl.tile_index = 0x80;
;
	lda     #$80
	sta     _player_tl+1
;
; player_tr.x = MIN_X + X + 8;
;
	lda     _X
	clc
	adc     #$08
	sta     _player_tr+3
;
; player_tr.y = MIN_Y + Y;
;
	lda     _Y
	sta     _player_tr
;
; player_tr.attributes = 0x00;
;
	lda     #$00
	sta     _player_tr+2
;
; player_tr.tile_index = 0x81;
;
	lda     #$81
	sta     _player_tr+1
;
; player_bl.x = MIN_X + X;
;
	lda     _X
	sta     _player_bl+3
;
; player_bl.y = MIN_Y + Y + 8;
;
	lda     _Y
	clc
	adc     #$08
	sta     _player_bl
;
; player_bl.attributes = 0x00;
;
	lda     #$00
	sta     _player_bl+2
;
; player_bl.tile_index = 0x90;
;
	lda     #$90
	sta     _player_bl+1
;
; player_br.x = MIN_X + X + 8;
;
	lda     _X
	clc
	adc     #$08
	sta     _player_br+3
;
; player_br.y = MIN_Y + Y + 8;
;
	lda     _Y
	clc
	adc     #$08
	sta     _player_br
;
; player_br.attributes = 0x00;
;
	lda     #$00
	sta     _player_br+2
;
; player_br.tile_index = 0x91;
;
	lda     #$91
	sta     _player_br+1
;
; reset_scroll();
;
	jmp     _reset_scroll

.endproc

; ---------------------------------------------------------------
; void __near__ screen_on (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_on: near

.segment	"CODE"

;
; PPU_CTRL = 0x80; // 1000 0000, turns NMI on
;
	lda     #$80
	sta     $2000
;
; PPU_MASK = 0x1e; // 0001 1110, show sprites and background
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ screen_off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_off: near

.segment	"CODE"

;
; PPU_CTRL = 0x00;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0x00;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_time (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_time: near

.segment	"CODE"

;
; PPU_ADDRESS = NAMETABLE0_HIGH + 0x00; // top-right of screen
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = NAMETABLE0_LOW  + 0x59;
;
	lda     #$59
	sta     $2006
;
; PPU_DATA = NUMBER_0 + time_min;
;
	lda     _time_min
	clc
	adc     #$30
	sta     $2007
;
; PPU_DATA = 0x3a; // ':'
;
	lda     #$3A
	sta     $2007
;
; PPU_DATA = NUMBER_0 + time_sec_high;
;
	lda     _time_sec_high
	clc
	adc     #$30
	sta     $2007
;
; PPU_DATA = NUMBER_0 + time_sec_low;
;
	lda     _time_sec_low
	clc
	adc     #$30
	sta     $2007
;
; reset_scroll();
;
	jmp     _reset_scroll

.endproc

; ---------------------------------------------------------------
; void __near__ input_handler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_input_handler: near

.segment	"CODE"

;
; if (InputPort1 & BUTTON_UP) {
;
	lda     _InputPort1
	and     #$08
	beq     L0580
;
; --player_tr.y;
;
	dec     _player_tr
;
; --player_tl.y;
;
	dec     _player_tl
;
; --player_bl.y;
;
	dec     _player_bl
;
; --player_br.y;
;
	dec     _player_br
;
; player_state = Going_Up;
;
	lda     #$00
	sta     _player_state
;
; if (InputPort1 & BUTTON_DOWN) {
;
L0580:	lda     _InputPort1
	and     #$04
	beq     L04D7
;
; ++player_tr.y;
;
	inc     _player_tr
;
; ++player_tl.y;
;
	inc     _player_tl
;
; ++player_bl.y;
;
	inc     _player_bl
;
; ++player_br.y;
;
	inc     _player_br
;
; player_state = Going_Down;
;
	lda     #$01
	sta     _player_state
;
; collision_check_vert();
;
L04D7:	jsr     _collision_check_vert
;
; if (InputPort1 & BUTTON_LEFT) {
;
	lda     _InputPort1
	and     #$02
	beq     L0581
;
; --player_tl.x;
;
	dec     _player_tl+3
;
; --player_tr.x;
;
	dec     _player_tr+3
;
; --player_bl.x;
;
	dec     _player_bl+3
;
; --player_br.x;
;
	dec     _player_br+3
;
; player_state = Going_Left;
;
	lda     #$02
	sta     _player_state
;
; if (InputPort1 & BUTTON_RIGHT) {
;
L0581:	lda     _InputPort1
	and     #$01
	beq     L04E8
;
; ++player_tl.x;
;
	inc     _player_tl+3
;
; ++player_tr.x;
;
	inc     _player_tr+3
;
; ++player_bl.x;
;
	inc     _player_bl+3
;
; ++player_br.x;
;
	inc     _player_br+3
;
; player_state = Going_Right;
;
	lda     #$03
	sta     _player_state
;
; collision_check_horiz();
;
L04E8:	jmp     _collision_check_horiz

.endproc

; ---------------------------------------------------------------
; void __near__ update_sprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_sprite: near

.segment	"CODE"

;
; if (player_state == Going_Up) {
;
	lda     _player_state
	bne     L0583
;
; player_tl.tile_index = 0x86;
;
	lda     #$86
	sta     _player_tl+1
;
; player_tr.tile_index = 0x87;
;
	lda     #$87
;
; } else if (player_state == Going_Down) {
;
	jmp     L0582
L0583:	lda     _player_state
	cmp     #$01
	bne     L0584
;
; player_tl.tile_index = 0x84;
;
	lda     #$84
	sta     _player_tl+1
;
; player_tr.tile_index = 0x85;
;
	lda     #$85
;
; } else if (player_state == Going_Left) {
;
	jmp     L0582
L0584:	lda     _player_state
	cmp     #$02
	bne     L0585
;
; player_tl.tile_index = 0x80;
;
	lda     #$80
	sta     _player_tl+1
;
; player_tr.tile_index = 0x81;
;
	lda     #$81
;
; } else if (player_state == Going_Right) {
;
	jmp     L0582
L0585:	lda     _player_state
	cmp     #$03
	bne     L0507
;
; player_tl.tile_index = 0x82;
;
	lda     #$82
	sta     _player_tl+1
;
; player_tr.tile_index = 0x83;
;
	lda     #$83
L0582:	sta     _player_tr+1
;
; }
;
L0507:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_second (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_second: near

.segment	"CODE"

;
; if (time_sec_low < 9)
;
	lda     _time_sec_low
	cmp     #$09
	bcs     L0586
;
; ++time_sec_low;
;
	inc     _time_sec_low
;
; else if (time_sec_low == 9) {
;
	rts
L0586:	lda     _time_sec_low
	cmp     #$09
	bne     L0521
;
; time_sec_low = 0;
;
	lda     #$00
	sta     _time_sec_low
;
; if (time_sec_high < 5)
;
	lda     _time_sec_high
	cmp     #$05
	bcs     L0587
;
; ++time_sec_high;
;
	inc     _time_sec_high
;
; else if (time_sec_high == 5) {
;
	rts
L0587:	lda     _time_sec_high
	cmp     #$05
	bne     L0521
;
; time_sec_high = 0;
;
	lda     #$00
	sta     _time_sec_high
;
; if (time_min < 9) 
;
	lda     _time_min
	cmp     #$09
	bcs     L0588
;
; ++time_min;
;
	inc     _time_min
;
; else {
;
	rts
;
; time_min = 0;
;
L0588:	lda     #$00
	sta     _time_min
;
; time_sec_high = 0;
;
	sta     _time_sec_high
;
; time_sec_low = 0;
;
	sta     _time_sec_low
;
; }
;
L0521:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_background: near

.segment	"CODE"

;
; PPU_ADDRESS = NAMETABLE0_HIGH;
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = NAMETABLE0_LOW;
;
	lda     #$00
	sta     $2006
;
; UnRLE(level1);
;
	lda     #<(_level1)
	ldx     #>(_level1)
	jmp     _UnRLE

.endproc

; ---------------------------------------------------------------
; void __near__ get_player_border (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_player_border: near

.segment	"CODE"

;
; player_left_side  = player_tl.x + PLAYER_LEFT_GAP;
;
	lda     _player_tl+3
	clc
	adc     #$03
	sta     _player_left_side
;
; player_right_side = player_tr.x + PLAYER_WIDTH - PLAYER_RIGHT_GAP;
;
	lda     _player_tr+3
	clc
	adc     #$08
	sec
	sbc     #$03
	sta     _player_right_side
;
; player_top        = player_tl.y + PLAYER_TOP_GAP;
;
	lda     _player_tl
	sta     _player_top
;
; player_bottom     = player_br.y + PLAYER_HEIGHT - PLAYER_BOT_GAP;
;
	lda     _player_br
	clc
	adc     #$10
	sta     _player_bottom
;
; player_center_x   = (player_left_side + player_right_side) >> 1;
;
	ldx     #$00
	lda     _player_left_side
	clc
	adc     _player_right_side
	bcc     L0589
	inx
L0589:	jsr     shrax1
	sta     _player_center_x
;
; player_center_y   = (player_top + player_bottom) >> 1;
;
	ldx     #$00
	lda     _player_top
	clc
	adc     _player_bottom
	bcc     L058A
	inx
L058A:	jsr     shrax1
	sta     _player_center_y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_check_vert (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_check_vert: near

.segment	"CODE"

;
; get_player_border();
;
	jsr     _get_player_border
;
; if (InputPort1 & BUTTON_UP) {
;
	lda     _InputPort1
	and     #$08
	beq     L058D
;
; collision_row = player_top >> 3;
;
	lda     _player_top
	lsr     a
	lsr     a
	lsr     a
	sta     _collision_row
;
; collision_col = player_center_x >> 3;
;
	lda     _player_center_x
	lsr     a
	lsr     a
	lsr     a
	sta     _collision_col
;
; if (c_map1[collision_row][collision_col] != 0) {
;
	ldx     #$00
	lda     _collision_row
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_c_map1)
	sta     ptr1
	lda     tmp1
	adc     #>(_c_map1)
	sta     ptr1+1
	ldy     _collision_col
	lda     (ptr1),y
	beq     L058D
;
; ++player_tl.y;
;
	inc     _player_tl
;
; ++player_bl.y;
;
	inc     _player_bl
;
; ++player_tr.y;
;
	inc     _player_tr
;
; ++player_br.y;
;
	inc     _player_br
;
; if (InputPort1 & BUTTON_DOWN) {
;
L058D:	lda     _InputPort1
	and     #$04
	beq     L0578
;
; collision_row = player_bottom >> 3;
;
	lda     _player_bottom
	lsr     a
	lsr     a
	lsr     a
	sta     _collision_row
;
; collision_col = player_center_x >> 3;
;
	lda     _player_center_x
	lsr     a
	lsr     a
	lsr     a
	sta     _collision_col
;
; if (c_map1[collision_row][collision_col] != 0) {
;
	ldx     #$00
	lda     _collision_row
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_c_map1)
	sta     ptr1
	lda     tmp1
	adc     #>(_c_map1)
	sta     ptr1+1
	ldy     _collision_col
	lda     (ptr1),y
	beq     L0578
;
; --player_tl.y;
;
	dec     _player_tl
;
; --player_bl.y;
;
	dec     _player_bl
;
; --player_tr.y;
;
	dec     _player_tr
;
; --player_br.y;
;
	dec     _player_br
;
; }
;
L0578:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_check_horiz (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_check_horiz: near

.segment	"CODE"

;
; get_player_border();
;
	jsr     _get_player_border
;
; if (InputPort1 & BUTTON_RIGHT) {
;
	lda     _InputPort1
	and     #$01
	beq     L0590
;
; collision_row = player_center_y >> 3;
;
	lda     _player_center_y
	lsr     a
	lsr     a
	lsr     a
	sta     _collision_row
;
; collision_col = player_right_side >> 3;
;
	lda     _player_right_side
	lsr     a
	lsr     a
	lsr     a
	sta     _collision_col
;
; if (c_map1[collision_row][collision_col] != 0) {
;
	ldx     #$00
	lda     _collision_row
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_c_map1)
	sta     ptr1
	lda     tmp1
	adc     #>(_c_map1)
	sta     ptr1+1
	ldy     _collision_col
	lda     (ptr1),y
	beq     L0590
;
; --player_tl.x;
;
	dec     _player_tl+3
;
; --player_bl.x;
;
	dec     _player_bl+3
;
; --player_tr.x;
;
	dec     _player_tr+3
;
; --player_br.x;
;
	dec     _player_br+3
;
; if (InputPort1 & BUTTON_LEFT) {
;
L0590:	lda     _InputPort1
	and     #$02
	beq     L055A
;
; collision_row = player_center_y >> 3;
;
	lda     _player_center_y
	lsr     a
	lsr     a
	lsr     a
	sta     _collision_row
;
; collision_col = player_left_side >> 3;
;
	lda     _player_left_side
	lsr     a
	lsr     a
	lsr     a
	sta     _collision_col
;
; if (c_map1[collision_row][collision_col] != 0) {
;
	ldx     #$00
	lda     _collision_row
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_c_map1)
	sta     ptr1
	lda     tmp1
	adc     #>(_c_map1)
	sta     ptr1+1
	ldy     _collision_col
	lda     (ptr1),y
	beq     L055A
;
; ++player_tl.x;
;
	inc     _player_tl+3
;
; ++player_bl.x;
;
	inc     _player_bl+3
;
; ++player_tr.x;
;
	inc     _player_tr+3
;
; ++player_br.x;
;
	inc     _player_br+3
;
; }
;
L055A:	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; screen_off();
;
	jsr     _screen_off
;
; draw_background();
;
	jsr     _draw_background
;
; set_palette();
;
	jsr     _set_palette
;
; update_time();
;
	jsr     _update_time
;
; init_player();
;
	jsr     _init_player
;
; screen_on();
;
	jsr     _screen_on
;
; WaitFrame(); // wait for vblank/nmi handler in reset.s to trigger
;
L0453:	jsr     _WaitFrame
;
; if (Frame_Number == 60) { // this runs once every second
;
	lda     _Frame_Number
	cmp     #$3C
	bne     L0458
;
; add_second();
;
	jsr     _add_second
;
; update_time();
;
	jsr     _update_time
;
; Frame_Number = 0;
;
	lda     #$00
	sta     _Frame_Number
;
; input_handler();
;
L0458:	jsr     _input_handler
;
; update_sprite();
;
	jsr     _update_sprite
;
; while(1) {
;
	jmp     L0453

.endproc

